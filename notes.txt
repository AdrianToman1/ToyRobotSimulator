Create a basic solution (i.e. MVP) and increase sophistication.
Start with only supporting standard input.
Full unit test coverage.
Full documentation.
Need test provide test data!
Implement some kind of automated system testing?



Thoughts
--------

What voice should the program use to communicate to the user?  

The robot needs to know it's the location on the table as cartesian coordinates.

"The application should discard all commands in the sequence until a valid `PLACE` command has been
executed."
This statement implies that a robot can have 0 or 1 tables, with 0 tables as the default state. The PLACE commands the assigns a robot to a table. Therefore, the robot's heading and location are nullable.

A command can both be relative to the robots current location (LEFT, RIGHT and MOVE) and absolute (PLACE).

The Challenge is written in a way that it allows the developer to think of the problem as a board game where the table is 5 x 5 grid of squares, and the toy robot occupies one of those squares.
This raises the interesting question: What is the width of the robot? If the robot "must be prevented from falling to destruction" can it safely occupy the locations at the very edge of the table without toppling off?
Since some of the examples begin with the robot on the edge of the table, it is reasonable to assume that the robot has no width (ie. it is a point).

The problem doesn't prescribe, or otherwise define, length as a value. Instead refers to the unit of measure for length abstractly as "units", and all the example length values are integers.
Can length be a real number???

There is distinct application logic and domain logic. A solution that seeks to provide a clear separation between the application logic and domain logic would be regarded more highly than one that didn't.
Commands are the only mechanism that the application logic interfaces with the domain logic.
Commands as defined by the problem description lends itself to be an interface, with the concrete implementation being a hierarchy of classes. i.e Abstract Turn, LeftTurn, RightTurn
The Challenge implies that commands are executed only on exactly 1 robot.
Commands don't know about tables, and vice-versa

Command results will require success, errors and warnings!

The Challenge isn't prescriptive regarding the application logic, leaving much of the detail to the developer discretion.
The Challenge leaves it to the developer to choose whether to support file or standard input. It's transparent that a solution that implements both methods would be more highly regarded than a solution only implemented one.
The Challenge makes no mention if it is a requirement that commands executed individually or as a batch (or both). However, if your support both file and standard input, then it follows that both batch and single command executed is required.

Application logic needs to include a parsing and a lexing code. Even though both of these functions should be trivial to implement, a good solution would keep them distinct.

The Challenge gives little guidance as to how to handle errors.
Invalid commands - "Any move that would cause the robot to fall must be ignored."
Unknown commands - ???
Known commands with an invalid format - ???

Ignore any commands that will put the robot into an invalid state, and continue to execute subsequent commands.
What about unknown commands and known commands with an invalid format?

There is inconsistency in the language in about how to handle the commands issues before the first PLACE command:
"The application should discard all commands in the sequence until a valid `PLACE` command has been
executed."
"A robot that is not on the table can choose the ignore the `MOVE`, `LEFT`, `RIGHT` and `REPORT`
commands" 

Command interface to include "complete" flag.
Command interface to include command result, and message.
My thinking is that the command class can be considered to be analogous to a .NET Task class.

Application default state:
1 Robot, not placed. (No heading or direction)
1 5x5 table.

*** The default state of the application, and the format & function of the commands as outline in The Challenge needs to be always preserved ***
The idea of extending the program to handle multiple robots or tables is exciting but can not violate the previous statement.


Below is a visual representation of the table surface as described in The Challenge.

                  N
    y ________________________
     |                        |
    4|                        |
     |                        |
    3|                        |
W    |                        | E
    2|                        |
     |                        |
    1|                        |
     |                        |
    0|________________________| 
     0    1    2    3    4     x
SW (0,0)          S


Represent the robot's heading in degrees from the x axis.
LEFT, RIGHT, NORTH, SOUTH, EAST, WEST then can be const/enums with following values in degrees.

LEFT +90
RIGHT -90

NORTH 90
SOUTH 270
EAST 0
WEST 180

This simplies the logic required to determine the robots new heading after a turn as can be done mathematically, not unlike using a unit vector to represent the heading.
If robot is placed facing NORTH (90), then makes a RIGHT (-90) turn the robot's new heading will be 90 + (-90) = 90 - 90 = 0 or EAST.

Will need to use modulo operator to handle the modular arithmetic.

Should the cartesian coordinates be a tuple, or another suitable class, instead of 2 single values?
Should the heading be it's own class containing all the required logic do turns etc.


Determine a vector's x and y components from it's magitude (v) and direction (a).

    y . . ._  
     |     /|
     |  v / .
     |   /  .
     |  /   .
     | /  a .
     |/_)___. 
             x

    <x, y> = <v cos a, v sin a>


Vector addition

    <x, y> = <x1 + x2, y1 + y2> 


Brad suggested that using a "controller pattern and some model classes to hold state information". I think having a Simulation class to contain the current simulation context (the current robot and table) has merit.



^([\w]+) ?([\w,]*)$

Regex expression to capture command text into command (group 1) and option param list (group 2).
Will need to split the comma seperated list seperately. Regex doesn't do structure.


Lines of text
    |
    V
  Lexer
    |
    V
 Tokens
    |
    V
 Parser
    |
    V
Commands





Create a fancy README.md file with a video showing off the Toy Robot Simulator in action like in this repo:
https://github.com/kefranabg/readme-md-generator


When does the simulation end???
Application logic will require two different modes:
- bounded
- free

In the bounded mode the app will only accept commands from a file and the simulate will be complete once all the commands have finished executing.

In free mode the app will accept single commands (and possible batches of commands from a file) for as long as the user desires. This will require a method a exiting the simulation gracefully.

I was think that app only goes into bounded mode when the file name is provided as a command line argument. Maybe, there could be an additional flag that will execute the commands and then leave the app in free mode. 


Ideas
-----
initial square table constant dimensions with no knowledge of the robot
store robot location in as a cartesian coordinates
store robot heading as a degrees from x-axis
return the number of successful executed commands from Simulation.Execute

allow the application logic to specify table dimensions
create rectangle table base class, with square table inheriting from it
create table interface to allow table surface to have any shape potentially
store a collection of robots on the table and the methods to detect if a square already contains a robot, the location a particular robot is in etc
MOVE can optionally move the report any distance forward
allow the robot to move fractional amount.
define robot size (a shape?)
refactor code to separate between domain and application logic
support both file and standard input commands
provide a filename as a command-line argument
store movement history for each robot
convert robot heading in degrees and define LEFT, RIGHT, NORTH, SOUTH, EAST and WEST in terms of degrees
new and different commands? relative PLACE, 180-degree turn, reverse, sidestep, history, distance until table edge
table obstructions
execute a batch of commands via standard input
non-robot commands
load file command
clear/reset command
command synonyms/aliases i.e. aboutface, turnaround, M (move), L (left), R (right) etc
multiple robots
multiple tables
save & recall simulation state
